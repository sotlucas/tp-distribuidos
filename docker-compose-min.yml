version: "3.4"
name: tp1

services:
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 50s
    networks:
      - testing_net
    ports:
      - "5672:5672"
      - "15672:15672"

  client_1:
    image: client:latest
    entrypoint: python3 /main.py archivo.csv airports-codepublic.csv
    environment:
      - REPLICA_ID=1
      - PYTHONUNBUFFERED=1
      - LOGGING_LEVEL=DEBUG
    depends_on:
      - server
    networks:
      - testing_net
    volumes:
      - ./client/config.ini:/config.ini
      - ./data/archivo.csv:/archivo.csv
      - ./data/airports-codepublic.csv:/airports-codepublic.csv
      - ./results:/results

  server:
    container_name: server
    image: server:latest
    entrypoint: python3 /main.py
    environment:
      - PYTHONUNBUFFERED=1
      - LOGGING_LEVEL=DEBUG
      - VUELOS_INPUT=vuelos_resultados_listener
      - VUELOS_OUTPUT=vuelos
      - LAT_LONG_OUTPUT=lat&long
      - RABBIT_HOST=rabbitmq
      - INPUT_TYPE=EXCHANGE
      - OUTPUT_TYPE=QUEUE
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - testing_net
    volumes:
      - ./server/config.ini:/config.ini

  filter_general:
    deploy:
      replicas: ${FILTER_GENERAL_REPLICAS}
    image: filter:latest
    entrypoint: python3 /main.py
    environment:
      - PYTHONUNBUFFERED=1
      - LOGGING_LEVEL=DEBUG
      - DELIMITER=,
      - INPUT_FIELDS=legId,searchDate,flightDate,startingAirport,destinationAirport,fareBasisCode,travelDuration,elapsedDays,isBasicEconomy,isRefundable,isNonStop,baseFare,totalFare,seatsRemaining,totalTravelDistance,segmentsDepartureTimeEpochSeconds,segmentsDepartureTimeRaw,segmentsArrivalTimeEpochSeconds,segmentsArrivalTimeRaw,segmentsArrivalAirportCode,segmentsDepartureAirportCode,segmentsAirlineName,segmentsAirlineCode,segmentsEquipmentDescription,segmentsDurationInSeconds,segmentsDistance,segmentsCabinCode
      - OUTPUT_FIELDS=legId,startingAirport,destinationAirport,totalFare,totalTravelDistance,travelDuration,segmentsArrivalAirportCode
      - INPUT=vuelos
      - OUTPUT=vuelos_filtered
      - RABBIT_HOST=rabbitmq
      - INPUT_TYPE=QUEUE
      - OUTPUT_TYPE=QUEUE
      - REPLICAS_COUNT=${FILTER_GENERAL_REPLICAS}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - testing_net

  tagger:
    deploy:
      replicas: ${TAGGER_MAX_AVG_REPLICAS}
    image: tagger:latest
    entrypoint: python3 /main.py
    environment:
      - PYTHONUNBUFFERED=1
      - LOGGING_LEVEL=DEBUG
      - INPUT=vuelos_filtered
      - OUTPUT=vuelos_resultados
      - RABBIT_HOST=rabbitmq
      - INPUT_TYPE=QUEUE
      - OUTPUT_TYPE=QUEUE
      - REPLICAS_COUNT=${TAGGER_MAX_AVG_REPLICAS}
      - TAG_NAME=MAX_AVG
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - testing_net

  health_checker:
    image: health_checker:latest
    entrypoint: python3 /main.py
    environment:
      - PYTHONUNBUFFERED=1
      - LOGGING_LEVEL=DEBUG
      - FILTER_GENERAL_REPLICAS=${FILTER_GENERAL_REPLICAS}
      - FILTER_MULTIPLE_REPLICAS=${FILTER_MULTIPLE_REPLICAS}
      - FILTER_AVG_MAX_REPLICAS=${FILTER_AVG_MAX_REPLICAS}
      - FILTER_DISTANCIA_REPLICAS=${FILTER_DISTANCIA_REPLICAS}
      - FILTER_TRES_ESCALAS_O_MAS_REPLICAS=${FILTER_TRES_ESCALAS_O_MAS_REPLICAS}
      - FILTER_DOS_MAS_RAPIDOS_REPLICAS=${FILTER_DOS_MAS_RAPIDOS_REPLICAS}
      - FILTER_LAT_LONG_REPLICAS=${FILTER_LAT_LONG_REPLICAS}
      - PROCESSOR_TRES_ESCALAS_O_MAS_REPLICAS=${PROCESSOR_TRES_ESCALAS_O_MAS_REPLICAS}
      - PROCESSOR_DOS_MAS_RAPIDOS_REPLICAS=${PROCESSOR_DOS_MAS_RAPIDOS_REPLICAS}
      - PROCESSOR_DISTANCIAS_REPLICAS=${PROCESSOR_DISTANCIAS_REPLICAS}
      - PROCESSOR_MAX_AVG_REPLICAS=${PROCESSOR_MAX_AVG_REPLICAS}
      - TAGGER_DOS_MAS_RAPIDOS_REPLICAS=${TAGGER_DOS_MAS_RAPIDOS_REPLICAS}
      - TAGGER_TRES_ESCALAS_O_MAS_REPLICAS=${TAGGER_TRES_ESCALAS_O_MAS_REPLICAS}
      - TAGGER_DISTANCIAS_REPLICAS=${TAGGER_DISTANCIAS_REPLICAS}
      - TAGGER_MAX_AVG_REPLICAS=${TAGGER_MAX_AVG_REPLICAS}
      - LOAD_BALANCER_REPLICAS=${LOAD_BALANCER_REPLICAS}
      - GROUPER_REPLICAS=${GROUPER_REPLICAS}
      - JOINER_REPLICAS=${JOINER_REPLICAS}
      - HEALTH_CHECKER_REPLICAS=${HEALTH_CHECKER_REPLICAS}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - testing_net

networks:
  testing_net:
    ipam:
      driver: default
      config:
        - subnet: 172.25.125.0/24